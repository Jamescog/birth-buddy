// Code generated by ent, DO NOT EDIT.

package users

import (
	"entgo.io/ent/dialect/sql"
	"github.com/Jamescog/birth-buddy/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldID, id))
}

// TelegramID applies equality check predicate on the "telegram_id" field. It's identical to TelegramIDEQ.
func TelegramID(v int) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldTelegramID, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldUsername, v))
}

// FullName applies equality check predicate on the "full_name" field. It's identical to FullNameEQ.
func FullName(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldFullName, v))
}

// IsPremium applies equality check predicate on the "is_premium" field. It's identical to IsPremiumEQ.
func IsPremium(v bool) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldIsPremium, v))
}

// BirthdayCount applies equality check predicate on the "birthday_count" field. It's identical to BirthdayCountEQ.
func BirthdayCount(v int) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldBirthdayCount, v))
}

// TelegramIDEQ applies the EQ predicate on the "telegram_id" field.
func TelegramIDEQ(v int) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldTelegramID, v))
}

// TelegramIDNEQ applies the NEQ predicate on the "telegram_id" field.
func TelegramIDNEQ(v int) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldTelegramID, v))
}

// TelegramIDIn applies the In predicate on the "telegram_id" field.
func TelegramIDIn(vs ...int) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldTelegramID, vs...))
}

// TelegramIDNotIn applies the NotIn predicate on the "telegram_id" field.
func TelegramIDNotIn(vs ...int) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldTelegramID, vs...))
}

// TelegramIDGT applies the GT predicate on the "telegram_id" field.
func TelegramIDGT(v int) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldTelegramID, v))
}

// TelegramIDGTE applies the GTE predicate on the "telegram_id" field.
func TelegramIDGTE(v int) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldTelegramID, v))
}

// TelegramIDLT applies the LT predicate on the "telegram_id" field.
func TelegramIDLT(v int) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldTelegramID, v))
}

// TelegramIDLTE applies the LTE predicate on the "telegram_id" field.
func TelegramIDLTE(v int) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldTelegramID, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Users {
	return predicate.Users(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.Users {
	return predicate.Users(sql.FieldIsNull(FieldUsername))
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.Users {
	return predicate.Users(sql.FieldNotNull(FieldUsername))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Users {
	return predicate.Users(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Users {
	return predicate.Users(sql.FieldContainsFold(FieldUsername, v))
}

// FullNameEQ applies the EQ predicate on the "full_name" field.
func FullNameEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldFullName, v))
}

// FullNameNEQ applies the NEQ predicate on the "full_name" field.
func FullNameNEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldFullName, v))
}

// FullNameIn applies the In predicate on the "full_name" field.
func FullNameIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldFullName, vs...))
}

// FullNameNotIn applies the NotIn predicate on the "full_name" field.
func FullNameNotIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldFullName, vs...))
}

// FullNameGT applies the GT predicate on the "full_name" field.
func FullNameGT(v string) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldFullName, v))
}

// FullNameGTE applies the GTE predicate on the "full_name" field.
func FullNameGTE(v string) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldFullName, v))
}

// FullNameLT applies the LT predicate on the "full_name" field.
func FullNameLT(v string) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldFullName, v))
}

// FullNameLTE applies the LTE predicate on the "full_name" field.
func FullNameLTE(v string) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldFullName, v))
}

// FullNameContains applies the Contains predicate on the "full_name" field.
func FullNameContains(v string) predicate.Users {
	return predicate.Users(sql.FieldContains(FieldFullName, v))
}

// FullNameHasPrefix applies the HasPrefix predicate on the "full_name" field.
func FullNameHasPrefix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasPrefix(FieldFullName, v))
}

// FullNameHasSuffix applies the HasSuffix predicate on the "full_name" field.
func FullNameHasSuffix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasSuffix(FieldFullName, v))
}

// FullNameEqualFold applies the EqualFold predicate on the "full_name" field.
func FullNameEqualFold(v string) predicate.Users {
	return predicate.Users(sql.FieldEqualFold(FieldFullName, v))
}

// FullNameContainsFold applies the ContainsFold predicate on the "full_name" field.
func FullNameContainsFold(v string) predicate.Users {
	return predicate.Users(sql.FieldContainsFold(FieldFullName, v))
}

// IsPremiumEQ applies the EQ predicate on the "is_premium" field.
func IsPremiumEQ(v bool) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldIsPremium, v))
}

// IsPremiumNEQ applies the NEQ predicate on the "is_premium" field.
func IsPremiumNEQ(v bool) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldIsPremium, v))
}

// BirthdayCountEQ applies the EQ predicate on the "birthday_count" field.
func BirthdayCountEQ(v int) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldBirthdayCount, v))
}

// BirthdayCountNEQ applies the NEQ predicate on the "birthday_count" field.
func BirthdayCountNEQ(v int) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldBirthdayCount, v))
}

// BirthdayCountIn applies the In predicate on the "birthday_count" field.
func BirthdayCountIn(vs ...int) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldBirthdayCount, vs...))
}

// BirthdayCountNotIn applies the NotIn predicate on the "birthday_count" field.
func BirthdayCountNotIn(vs ...int) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldBirthdayCount, vs...))
}

// BirthdayCountGT applies the GT predicate on the "birthday_count" field.
func BirthdayCountGT(v int) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldBirthdayCount, v))
}

// BirthdayCountGTE applies the GTE predicate on the "birthday_count" field.
func BirthdayCountGTE(v int) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldBirthdayCount, v))
}

// BirthdayCountLT applies the LT predicate on the "birthday_count" field.
func BirthdayCountLT(v int) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldBirthdayCount, v))
}

// BirthdayCountLTE applies the LTE predicate on the "birthday_count" field.
func BirthdayCountLTE(v int) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldBirthdayCount, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Users) predicate.Users {
	return predicate.Users(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Users) predicate.Users {
	return predicate.Users(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Users) predicate.Users {
	return predicate.Users(sql.NotPredicates(p))
}
